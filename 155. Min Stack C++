class MinStack {
public:
    /** initialize your data structure here. */
    
    stack<int> st;
    multiset<int> se;
    unordered_map<int,vector<set<int>::iterator> > m;
    MinStack() {
        
    }
    
    void push(int val) {
        auto x=se.insert(val);
        // cout<<
        m[val].push_back(x);
        st.push(val);
    }
    
    void pop() {
        
        auto itr = m[st.top()].back();
        se.erase(itr);
        m[st.top()].pop_back();
        
        
        st.pop();
    }
    
    int top() {
        return st.top();
    }
    
    int getMin() {
        return *se.begin();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */


------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Better Soln 


  stack<pair<int,int>> st;

    
    MinStack() {
    }
    
    void push(int val) {
        if(st.empty())
            st.push({val,val});
        else{
            st.push({val,min(st.top().second,val)});
        }
    }
    
    void pop() {
        
        
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        
        return st.top().second;

    }

*/

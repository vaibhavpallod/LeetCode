class Solution {
public:
    
    bool dp[10000]={false};
    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int maxx=INT_MIN;
        vector<vector<int>> vec,vec2;
        for(auto x:intervals){
            if(x[0]==x[1])
                vec2.push_back({x[0],x[1]});
                // dp[x[0]] = true;
            else
            fill(dp+x[0],dp+x[1],true);
            maxx=max(maxx,x[1]);
            
        }
        int j=0;
        while(j<maxx){
            int start=j;
            if(dp[j]==true){
                
                while(j<=maxx && dp[j++]==true);
                
                vec.push_back({start,j-1});
                
            }else
                j++;
            
            
        }
        
        
        for(auto x:vec2){
            bool isavail=false;
            for(auto y:vec){
                if(x[0]<=y[1] && x[0]>= y[0])
                    isavail=true;
            }
            if(!isavail){
                vec.push_back({x[0],x[1]});                
            }
            
        }
        
        return vec;
    }
};

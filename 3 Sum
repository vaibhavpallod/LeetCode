class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        int size=num.size();
        int used[3000]={-1};
        vector<vector<int>> ret;
        
        if(size<3)
            return ret;
        for(int i=0;i<num.size()-2;i++){
            
            
            
            for(int j=i+1;j<num.size()-1;j++){
                auto itr=find(num.begin(),num.end(),(num[i]+num[j])*(-1) );
                int dis=distance(num.begin(),itr) ;
                while((dis<=j)&&itr!=num.end() )
                {
                    itr=find(++itr,num.end(),(num[i]+num[j])*(-1) );
                    dis=distance(num.begin(),itr) ;
                }
                if( itr !=num.end() ) 
                {
                    vector<int> v;
                    v.push_back(num[i]);
                    v.push_back(num[j]);
                    v.push_back(*itr);
                    cout<<num[i]<<" "<<num[j]<<" "<<*itr<<endl;
                    if(used[i]!=1||used[j]!=1||used[dis]!=1)
                    ret.push_back(v);
                    used[i]=1;
                    used[j]=1;
                    used[dis]=1;
                    
                }
                
                
            }
            
            
            
            
        }
        
        for(int i=0;i<ret.size()-1;i++){
            
            if(ret[i][0]==ret[i+1][0] && ret[i][1]==ret[i+1][1]&&ret[i]                         [2]==ret[i+1][2]){
                auto itr=find(ret.begin(),ret.end(),ret[i]);
                ret.erase(itr);
                i--;
            }
            
        }
        
        return ret;
        
    }
};

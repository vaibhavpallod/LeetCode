class Solution {
public:
    bool fin=false;
    int count=0;
    bool track(string s1,string s2,string s3,int l,int r,int ms){
        cout<<++count<<" ";
        
        if(s1.length()+s2.length()!=s3.length())
        return false;
        
        if((l+r)==s3.length()){
            fin=true;
            return true;
        }
        if((l<=s1.length() && s3[ms]==s1[l]) && (r<=s2.length() &&s3[ms]==s2[r])){
          
            if(s3[ms]==s1[l]){
                track(s1,s2,s3,l+1,r,ms+1);
            }
            if(s3[ms]==s2[r]){
                track(s1,s2,s3,l,r+1,ms+1);
            }
      
        }else if((l<=s1.length() && s3[ms]==s1[l]) || (r<=s2.length() &&s3[ms]==s2[r])){
            
            if(s3[ms]==s1[l]){
                return track(s1,s2,s3,l+1,r,ms+1);
            }
            if(s3[ms]==s2[r]){
                // cout<<"S2 "<<s2[r]<<endl;
                return track(s1,s2,s3,l,r+1,ms+1);
            }
            
            
        }

        
        return false;
    }
    
    
    bool isInterleave(string s1, string s2, string s3) {
       long l=0,r=0;
        
        map<char,int> m1,m2;
        
        
        for(auto x:s1){
            m1[x]++;
        }
        
        for(auto x:s2){
            m1[x]++;
        }
        
        
        for(auto x:s3){
            m2[x]++;
        }
        
        for(auto x:m1){
            if(x.second!=m2[x.first])
                return false;
        }
        
        
        
        track(s1,s2,s3,0,0,0);
        
        
//         for(auto x:s3){
            
//             else
//                 return false;
            
//         }
        
     return fin;   
    }
};
